var s = new Array()

s[0] = "SQLiteWrap^SQLiteWrap.html^SQLite 3.x object based wrapper^    <p>Can be used for object based access to SQLite3 databases.    <p>Note: Requires Sqlite 3.6.8 and higher!    <p>Designed for Delphi 6+ and Freepascal, Unicode support for Delphi 2009+    <p>V2.1.0 Added BLOB parameters and improved BLOB handling. Added TotalChanges property. Some bugfixes.    <p>V2.0.0 29 June 2010 Ported to D2009 Unicode by Roger Lascelles (support@veecad.com)    <p>V1.0.0 by Lukáš Gebauer at <a  target=\"_parent\" href=\"http://www.ararat.cz/doku.php/en:sqlitewrap\">http://www.ararat.cz/doku.php/en:sqlitewrap</a>. based on work by Tim Anderson (tim@itwriting.com)    <p>UNICODE HANDLING: Delphi 2009+ Pass data as native UnicodeString. Datas are converted to SQLite native UTF-8 internally.    <p>pre-Delphi 2009 Pass data as UTF8String (it is AnsiString contains UTF8 datas) and you must convert data to UTF-8 explicitly! Pasing data by UTF8String typed variable made your source forward compatible with Delphi 2009+.    <p>Sample usage: </p>    <pre class=\"longcode\">  <span class=\"pascal_keyword\">procedure</span> sample;  <span class=\"pascal_keyword\">var</span>    database: TSqliteDatabase;    tab: TSqliteTable;    s: utf8string;  <span class=\"pascal_keyword\">begin</span>    database := TSqliteDatabase.Create(<span class=\"pascal_string\">'somedatabase.db3'</span>);    <span class=\"pascal_keyword\">try</span>      database.AddParamInt(<span class=\"pascal_string\">':key'</span>, <span class=\"pascal_numeric\">123456</span>);      tab := database.GetTable(<span class=\"pascal_string\">'SELECT * FROM some_table WHERE ROWID=:key'</span>);      <span class=\"pascal_keyword\">try</span>        <span class=\"pascal_keyword\">while</span> <span class=\"pascal_keyword\">not</span> tab.EOF <span class=\"pascal_keyword\">do</span>        <span class=\"pascal_keyword\">begin</span>          s := tab.FieldAsString(tab.FieldIndex[<span class=\"pascal_string\">'ROWID'</span>]);          <span class=\"pascal_comment\">//do something with 'S' variable...</span>          <span class=\"pascal_comment\">//...</span>          <span class=\"pascal_comment\">//...then go to nexr row.</span>          tab.next;        <span class=\"pascal_keyword\">end</span>;      <span class=\"pascal_keyword\">finally</span>        tab.free;      <span class=\"pascal_keyword\">end</span>;    <span class=\"pascal_keyword\">finally</span>      database.free;    <span class=\"pascal_keyword\">end</span>;  <span class=\"pascal_keyword\">end</span>; </pre>    <p> ^0"
s[1] = "SQLiteWrap.ESQLiteException^SQLiteWrap.ESQLiteException.html^Exception Class for SQLite based errors^ ^0"
s[2] = "SQLiteWrap.TSQliteParam^SQLiteWrap.TSQliteParam.html^Class for storing deferred parameters^ Do not use it, it is used internally only! ^0"
s[3] = "SQLiteWrap.TSQliteParam.name^SQLiteWrap.TSQliteParam.html#name^^ ^0"
s[4] = "SQLiteWrap.TSQliteParam.valuetype^SQLiteWrap.TSQliteParam.html#valuetype^^ ^0"
s[5] = "SQLiteWrap.TSQliteParam.valueinteger^SQLiteWrap.TSQliteParam.html#valueinteger^^ ^0"
s[6] = "SQLiteWrap.TSQliteParam.valuefloat^SQLiteWrap.TSQliteParam.html#valuefloat^^ ^0"
s[7] = "SQLiteWrap.TSQliteParam.valuedata^SQLiteWrap.TSQliteParam.html#valuedata^^ ^0"
s[8] = "SQLiteWrap.TSQLiteDatabase^SQLiteWrap.TSQLiteDatabase.html^Class for handling SQLite database^ ^0"
s[9] = "SQLiteWrap.TSQLiteDatabase.Create^SQLiteWrap.TSQLiteDatabase.html#Create^^Class constructor. Pass filename of database. If databas not exists, then new one is created. If you pass empty string as filename, then temporary database is created. If you pass ':memory:' as filename, then temporary database in memory is created.    <p>Warning: Pass FileName as AnsiString (if you are not using Unicode Delphi version) or as UnicodeString (on Delphi 2009 and higher)!    ^0"
s[10] = "SQLiteWrap.TSQLiteDatabase.Destroy^SQLiteWrap.TSQLiteDatabase.html#Destroy^^Class descructor. Call Free instead.    ^0"
s[11] = "SQLiteWrap.TSQLiteDatabase.ExecSQL^SQLiteWrap.TSQLiteDatabase.html#ExecSQL^^Run SQL command without result. You can call before functions AddParam* for set query parameters.    ^0"
s[12] = "SQLiteWrap.TSQLiteDatabase.GetTable^SQLiteWrap.TSQLiteDatabase.html#GetTable^^Run SQL command with result. You can call before functions AddParam* for set query parameters. If you set PerpareOnly, then query is just prepared but first row is not fetched!    ^0"
s[13] = "SQLiteWrap.TSQLiteDatabase.GetTableValue^SQLiteWrap.TSQLiteDatabase.html#GetTableValue^^Run SQL command and number from first field in first row is returned. You can call before functions AddParam* for set query parameters.    ^0"
s[14] = "SQLiteWrap.TSQLiteDatabase.GetTableString^SQLiteWrap.TSQLiteDatabase.html#GetTableString^^Run SQL command and value from first field in first row is returned. You can call before functions AddParam* for set query parameters.    ^0"
s[15] = "SQLiteWrap.TSQLiteDatabase.GetTableStrings^SQLiteWrap.TSQLiteDatabase.html#GetTableStrings^^Run SQL command and values from first field in each row is filled to stringlist. You can call before functions AddParam* for set query parameters.    ^0"
s[16] = "SQLiteWrap.TSQLiteDatabase.InTransaction^SQLiteWrap.TSQLiteDatabase.html#InTransaction^^Return <code>True</code> if database is in transaction state.    ^0"
s[17] = "SQLiteWrap.TSQLiteDatabase.Start^SQLiteWrap.TSQLiteDatabase.html#Start^^Start transaction. You can modify transaction type by Param parameter. If you use non-empty Name parameter, then savepoint is used. Savepoint is named and can be nested.    ^0"
s[18] = "SQLiteWrap.TSQLiteDatabase.Commit^SQLiteWrap.TSQLiteDatabase.html#Commit^^Commit transaction. If you use non-empty Name parameter, then savepoint is used. Savepoint is named and can be nested.    ^0"
s[19] = "SQLiteWrap.TSQLiteDatabase.Rollback^SQLiteWrap.TSQLiteDatabase.html#Rollback^^Rollback transaction. If you use non-empty Name parameter, then savepoint is used. Savepoint is named and can be nested.    ^0"
s[20] = "SQLiteWrap.TSQLiteDatabase.LastInsertRowID^SQLiteWrap.TSQLiteDatabase.html#LastInsertRowID^^Get ROWID of last inserted row.    ^0"
s[21] = "SQLiteWrap.TSQLiteDatabase.LastChangedRows^SQLiteWrap.TSQLiteDatabase.html#LastChangedRows^^Return number of modified rows by last query.    ^0"
s[22] = "SQLiteWrap.TSQLiteDatabase.TotalChanges^SQLiteWrap.TSQLiteDatabase.html#TotalChanges^^Return number of modified rows starting by opened database connection.    ^0"
s[23] = "SQLiteWrap.TSQLiteDatabase.SetTimeout^SQLiteWrap.TSQLiteDatabase.html#SetTimeout^^Set wait timeout. if database is locked, then it wait this timeout. If database is not released within this timeout, then error is returned.    ^0"
s[24] = "SQLiteWrap.TSQLiteDatabase.Version^SQLiteWrap.TSQLiteDatabase.html#Version^^Return SQLite engine version.    ^0"
s[25] = "SQLiteWrap.TSQLiteDatabase.AddCustomCollate^SQLiteWrap.TSQLiteDatabase.html#AddCustomCollate^^Add custom sorting procedure as new Collate.    ^0"
s[26] = "SQLiteWrap.TSQLiteDatabase.AddSystemCollate^SQLiteWrap.TSQLiteDatabase.html#AddSystemCollate^^Add collate named SYSTEM for correct data sorting by user's locale    ^0"
s[27] = "SQLiteWrap.TSQLiteDatabase.ParamsClear^SQLiteWrap.TSQLiteDatabase.html#ParamsClear^^Clear all query parameters.    ^0"
s[28] = "SQLiteWrap.TSQLiteDatabase.AddParamInt^SQLiteWrap.TSQLiteDatabase.html#AddParamInt^^Add named query parameter of integer type.    ^0"
s[29] = "SQLiteWrap.TSQLiteDatabase.AddParamFloat^SQLiteWrap.TSQLiteDatabase.html#AddParamFloat^^Add named query parameter of floating-point type.    ^0"
s[30] = "SQLiteWrap.TSQLiteDatabase.AddParamText^SQLiteWrap.TSQLiteDatabase.html#AddParamText^^Add named query parameter of string or binary type.    ^0"
s[31] = "SQLiteWrap.TSQLiteDatabase.AddParamNull^SQLiteWrap.TSQLiteDatabase.html#AddParamNull^^Add named query parameter with null value.    ^0"
s[32] = "SQLiteWrap.TSQLiteDatabase.AddParamBlobPtr^SQLiteWrap.TSQLiteDatabase.html#AddParamBlobPtr^^Add named query parameter of BLOB type from the memory buffer.    ^0"
s[33] = "SQLiteWrap.TSQLiteDatabase.AddParamBlobText^SQLiteWrap.TSQLiteDatabase.html#AddParamBlobText^^Add named query parameter of BLOB type from the binary string.    ^0"
s[34] = "SQLiteWrap.TSQLiteDatabase.AddParamBlob^SQLiteWrap.TSQLiteDatabase.html#AddParamBlob^^Add named query parameter of BLOB type from the stream.    ^0"
s[35] = "SQLiteWrap.TSQLiteDatabase.DB^SQLiteWrap.TSQLiteDatabase.html#DB^^SQLite database handler. ^0"
s[36] = "SQLiteWrap.TSQLiteDatabase.OnQuery^SQLiteWrap.TSQLiteDatabase.html#OnQuery^^Debug hook for log all called queries. ^0"
s[37] = "SQLiteWrap.TSQLiteTable^SQLiteWrap.TSQLiteTable.html^Class for handling SQLite query result^ ^0"
s[38] = "SQLiteWrap.TSQLiteTable.Create^SQLiteWrap.TSQLiteTable.html#Create^^Class constructor. Called internally by <a class=\"normal\" href=\"SQLiteWrap.TSQLiteDatabase.html\">TSQLiteDatabase</a>    ^0"
s[39] = "SQLiteWrap.TSQLiteTable.Destroy^SQLiteWrap.TSQLiteTable.html#Destroy^^Class descructor. Call Free instead.    ^0"
s[40] = "SQLiteWrap.TSQLiteTable.FieldAsInteger^SQLiteWrap.TSQLiteTable.html#FieldAsInteger^^Read field from current row as integer.    ^0"
s[41] = "SQLiteWrap.TSQLiteTable.FieldAsBlob^SQLiteWrap.TSQLiteTable.html#FieldAsBlob^^Read field from current row as blob to memory stream.    ^0"
s[42] = "SQLiteWrap.TSQLiteTable.FieldAsBlobPtr^SQLiteWrap.TSQLiteTable.html#FieldAsBlobPtr^^Read field from current row as pointer to memory.    ^0"
s[43] = "SQLiteWrap.TSQLiteTable.FieldAsBlobText^SQLiteWrap.TSQLiteTable.html#FieldAsBlobText^^Read field from current row as blob to AnsiString.    ^0"
s[44] = "SQLiteWrap.TSQLiteTable.FieldIsNull^SQLiteWrap.TSQLiteTable.html#FieldIsNull^^Test if field from current row contains null value.    ^0"
s[45] = "SQLiteWrap.TSQLiteTable.FieldAsString^SQLiteWrap.TSQLiteTable.html#FieldAsString^^Read field from current row as string.    ^0"
s[46] = "SQLiteWrap.TSQLiteTable.FieldAsDouble^SQLiteWrap.TSQLiteTable.html#FieldAsDouble^^Read field from current row as floating-point.    ^0"
s[47] = "SQLiteWrap.TSQLiteTable.Next^SQLiteWrap.TSQLiteTable.html#Next^^Go to next row.    ^0"
s[48] = "SQLiteWrap.TSQLiteTable.ParamsClear^SQLiteWrap.TSQLiteTable.html#ParamsClear^^Reset all query params.    ^0"
s[49] = "SQLiteWrap.TSQLiteTable.Reset^SQLiteWrap.TSQLiteTable.html#Reset^^Reset current result set. After this you can set new query parameters values and call prepared query again by <a class=\"normal\" href=\"SQLiteWrap.TSQLiteTable.html#Next\">Next</a>    ^0"
s[50] = "SQLiteWrap.TSQLiteTable.AddParamInt^SQLiteWrap.TSQLiteTable.html#AddParamInt^^Add named query parameter of integer type.    ^0"
s[51] = "SQLiteWrap.TSQLiteTable.AddParamFloat^SQLiteWrap.TSQLiteTable.html#AddParamFloat^^Add named query parameter of floating-point type.    ^0"
s[52] = "SQLiteWrap.TSQLiteTable.AddParamText^SQLiteWrap.TSQLiteTable.html#AddParamText^^Add named query parameter of string or binary type.    ^0"
s[53] = "SQLiteWrap.TSQLiteTable.AddParamNull^SQLiteWrap.TSQLiteTable.html#AddParamNull^^Add named query parameter with null value.    ^0"
s[54] = "SQLiteWrap.TSQLiteTable.AddParamBlobPtr^SQLiteWrap.TSQLiteTable.html#AddParamBlobPtr^^Add named query parameter of BLOB type from memory buffer.    ^0"
s[55] = "SQLiteWrap.TSQLiteTable.AddParamBlobText^SQLiteWrap.TSQLiteTable.html#AddParamBlobText^^Add named query parameter of BLOB type from binary string.    ^0"
s[56] = "SQLiteWrap.TSQLiteTable.AddParamBlob^SQLiteWrap.TSQLiteTable.html#AddParamBlob^^Add named query parameter of BLOB type from stream.    ^0"
s[57] = "SQLiteWrap.TSQLiteTable.Fields^SQLiteWrap.TSQLiteTable.html#Fields^^Return value of some field in current row. ^0"
s[58] = "SQLiteWrap.TSQLiteTable.FieldByName^SQLiteWrap.TSQLiteTable.html#FieldByName^^Return value of named field in current row. ^0"
s[59] = "SQLiteWrap.TSQLiteTable.FieldIndex^SQLiteWrap.TSQLiteTable.html#FieldIndex^^Return index of some named field. ^0"
s[60] = "SQLiteWrap.TSQLiteTable.Columns^SQLiteWrap.TSQLiteTable.html#Columns^^Return field type of some field. ^0"
s[61] = "SQLiteWrap.TSQLiteTable.EOF^SQLiteWrap.TSQLiteTable.html#EOF^^Indicate last row in result set. ^0"
s[62] = "SQLiteWrap.TSQLiteTable.ColCount^SQLiteWrap.TSQLiteTable.html#ColCount^^Return number of fields in row. ^0"
s[63] = "SQLiteWrap.TSQLiteTable.Row^SQLiteWrap.TSQLiteTable.html#Row^^Number of current row. ^0"
s[64] = "SQLiteWrap.THookQuery^SQLiteWrap.html#THookQuery^procedural prototype for <code>OnQuery</code> hook.^    ^0"
